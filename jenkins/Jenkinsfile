pipeline {
    environment {
		CDD_APPLICATION_VERSION_NAME = "${env.GIT_BRANCH}"
        AWS_ECR_REGION = "eu-central-1"
        AWS_ECS_TASK_DEFINITION = "app1"
        AWS_ECS_COMPATIBILITY = "FARGATE"
        AWS_ECS_NETWORK_MODE = "awsvpc"
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_TASK_DEFINITION_PATH = './jenkins/ecs/container_definition_update_image.json'
        AWS_ECS_CLUSTER = 'petclinic-claster'
        AWS_ECR_URL = '934086672967.dkr.ecr.eu-central-1.amazonaws.com/java'

        AWS_ECS_SERVICE = 'what-backend-release-ecs-service'
        AWS_ECS_EXECUTION_ROL = "what-backend-execution-task-role" 
    }
    agent {
        label 'main'
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') { 
            steps {
                sh 'mvn test' 
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml' 
                }
            }
        }
        stage('Docker Build') { 
            steps { 
                script{
                    sh 'docker image prune -a -f'
                    sh "cp ./jenkins/Dockerfile ./Dockerfile"
                    myImage = docker.build('java')
                }
            }
        }
        stage('Push to ECR') {
            steps {
                script{
                    TAG = sh (
                        script: 'git log -1 --pretty=%h',
                        returnStdout: true
                    ).trim()
                    docker.withRegistry(
                        'https://934086672967.dkr.ecr.eu-central-1.amazonaws.com',
                        'ecr:eu-central-1:aws_creds') {
                        myImage.push(TAG)
                        myImage.push("latest")
                    }
                }
            }
        }
        stage('Deploy to ECS'){
            steps {
                withAWS(credentials: 'aws_creds', region: "${AWS_ECR_REGION}") {
                    script {
                        sh '''
                            /usr/local/bin/aws ecs register-task-definition \
                                --region ${AWS_ECR_REGION} \
                                --family ${AWS_ECS_TASK_DEFINITION} \
                                --requires-compatibilities ${AWS_ECS_COMPATIBILITY} \
                                --network-mode ${AWS_ECS_NETWORK_MODE} \
                                --cpu ${AWS_ECS_CPU} \
                                --memory ${AWS_ECS_MEMORY} \
                                --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH} 
                        '''
                        def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
                        sh("/usr/local/bin/aws ecs update-service \
                            --cluster ${AWS_ECS_PANEL_CLUSTER} \
                            --service ${AWS_ECS_PANEL_SERVICE} \
                            --task-definition ${AWS_ECS_PANEL_TASK_DEFINITION}")
                        // :${taskRevision}
                    }
                }
            }
        }
    }
}
                                // --execution-role-arn ${AWS_ECS_EXECUTION_ROL} \